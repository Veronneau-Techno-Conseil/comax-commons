@using CommunAxiom.Commons.ClientUI.Shared.Logging
@using CommunAxiom.Commons.ClientUI.Shared.ViewModels.Interfaces
@implements IDisposable

@inject LoggerJob _job
@inject ISessionViewModel _loginViewModel
@inject NavigationManager _navigationManager
@inject IStringLocalizer<App> _localizer
    
<CascadingAuthenticationState>
    <Error>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        
                        @{
                            _ = CheckState();
                        }
                        
                        <div class="notification is-warning">
                            @_localizer["Unauthorized"]
                        </div>
                        
                    </NotAuthorized>
                    <Authorizing>
                        <h1>Authorization in progress</h1>
                        <p>Only visible while authorization is in progress.</p>
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound> 
        </Router>  
    </Error>
</CascadingAuthenticationState>

@code {
    
    private async Task CheckState(){
        OperationResult<string>? state = await _loginViewModel.GetState();
        if(state.Result != AuthSteps.OK){
            _navigationManager.NavigateTo("/login");
        }
    }

    protected override Task OnInitializedAsync() =>
        _job.Start();

    public void Dispose() =>
        _job.Stop();
}
