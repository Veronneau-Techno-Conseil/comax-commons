@page "/create_portfolio"

@using CommunAxiom.Commons.ClientUI.Shared.ViewModels.Interfaces
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager _navigationManager
@inject IStringLocalizer<CreatePortfolio> _localizer
@inject IPortfolioViewModel _portfolioViewModel
@inject IToastService toastService

<h3>@_localizer["CreatePortfolio"]</h3>
<EditForm Model="@_portfolioViewModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <label> @_localizer["Type"] </label>
        <select id="type" @bind="_portfolioViewModel.TheType">
            <option selected disabled>@_localizer["SelectType"]</option>
            <option value="@_portfolioViewModel.PROJECT">@_portfolioViewModel.PROJECT</option>
            <option value="@_portfolioViewModel.DATABASE">@_portfolioViewModel.DATABASE</option>
        </select>
        <span asp-validation-for="Email" class="help is-danger"><ValidationMessage For="@(()=>_portfolioViewModel.TheType)"></ValidationMessage></span>
    </div>

    <div>
        <label> @_localizer["Name"] </label>
        <input id="name" placeholder="@_localizer["Name"]" @bind="_portfolioViewModel.Name" />
        <span asp-validation-for="Email" class="help is-danger"><ValidationMessage For="@(()=>_portfolioViewModel.Name)"></ValidationMessage></span>
    </div>

    <div>
        <label> @_localizer["Parent"] </label>
        <select id="parent" @bind="_portfolioViewModel.ParentId">
            <option selected disabled>@_localizer["SelectParent"]</option>
            @if (_portfolios != null)
            {
                @foreach (var portfolio in _portfolios)
                {
                    <option value="@portfolio.ID"> @portfolio.Name </option>
                }
            }
        </select>
    </div>

    <div class="field level evenly">
        <button type="submit" class="button">@_localizer["Create"]</button>
    </div>
</EditForm>

@code {
    private HubConnection? hubConnection;
    List<Portfolio> _portfolios = new List<Portfolio>();
    bool IsUnique;

    protected async override Task OnInitializedAsync()
    {
        _portfolios = await _portfolioViewModel.GetPortfolios();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/systemhub"))
            .Build();
        await hubConnection.StartAsync();
    }

    private async void HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(_portfolioViewModel.Name))
        {
            IsUnique = await _portfolioViewModel.CheckIfUnique(
            string.IsNullOrEmpty(_portfolioViewModel.Name) ? string.Empty : _portfolioViewModel.Name);
        }
        else
        {
            IsUnique = false;
        }

        if (IsUnique)
        {
            var portfolio = new Portfolio
                {
                    ID = Guid.NewGuid().ToString(),
                    Name = _portfolioViewModel.Name,
                    TheType = _portfolioViewModel.TheType,
                    ParentId = _portfolioViewModel.ParentId
                };
            await _portfolioViewModel.CreatePortfolio(portfolio);
            await SendNotification(portfolio.Name);
            StateHasChanged();
            _navigationManager.NavigateTo("/list_portfolios");
        }
        else
        {
            ShowUniquenessError();
        }
    }

    private void ShowUniquenessError()
    {
        toastService.ShowError(_localizer["NameIsNotUnique"], "ERROR");
    }

    private async Task SendNotification(string portfolioName)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendNotification", "From Portfolio", ("Portfolio " + portfolioName + " has  been created").ToString(), 0);
        }
    }
}